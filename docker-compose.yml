services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scanner_postgres
    environment:
      POSTGRES_DB: scanner
      POSTGRES_USER: scanner
      POSTGRES_PASSWORD: scanner123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - scanner_network
    restart: unless-stopped

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: scanner_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scanner_network
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: scanner_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - scanner_network
    restart: unless-stopped

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scanner_app
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/scanner
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ENVIRONMENT=development
    volumes:
      - ./app:/app/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - scanner_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scanner_celery_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/scanner
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ENVIRONMENT=development
    volumes:
      - ./app:/app/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - scanner_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scanner_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/scanner
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ENVIRONMENT=development
    volumes:
      - ./app:/app/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - scanner_network
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scanner_flower
    command: celery -A app.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://scanner:scanner123@postgres:5432/scanner
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - scanner_network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: scanner_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - app
    networks:
      - scanner_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  scanner_network:
    driver: bridge 